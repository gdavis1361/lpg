name: Supabase Branch Environment

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'lpg-backend/supabase/**'
      - '.github/workflows/supabase-branch.yml'

# Add explicit permissions
permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  create-branch-environment:
    runs-on: ubuntu-latest
    
    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'
      
      - name: Install backend dependencies
        working-directory: lpg-backend
        run: |
          npm ci --legacy-peer-deps
          echo "Node $(node -v)"
          echo "NPM $(npm -v)"

      # Install Supabase CLI using official action
      - uses: supabase/setup-cli@v1
        with:
          version: latest
          
      - name: Verify Supabase CLI
        run: |
          echo "Supabase CLI $(supabase --version)"
            
      # Install and configure Doppler CLI for secure environment variable access
      - name: Install Doppler CLI
        uses: dopplerhq/cli-action@v2
      
      - name: Setup Doppler
        run: |
          doppler setup --no-interactive --token=${{ secrets.DOPPLER_TOKEN }} --project=lpg --config=dev
      
      # Add diagnostic steps to validate Doppler and environment variables
      - name: Diagnose Doppler and SUPABASE_PROJECT_ID
        working-directory: lpg-backend
        run: |
          echo "== Doppler CLI Version =="
          doppler --version

          echo "== SUPABASE_PROJECT_ID direct Doppler fetch =="
          doppler run --project lpg --config dev -- printenv SUPABASE_PROJECT_ID

          echo "== All env variables containing 'SUPABASE' =="
          doppler run --project lpg --config dev -- env | grep SUPABASE || true

          PROJECT_ID=$(doppler run --project lpg --config dev -- printenv SUPABASE_PROJECT_ID)
          echo "PROJECT_ID='$PROJECT_ID'"
          if [ -z "$PROJECT_ID" ]; then
            echo "::error::SUPABASE_PROJECT_ID is missing or empty in Doppler."
            exit 1
          else
            echo "::notice::SUPABASE_PROJECT_ID successfully fetched: $PROJECT_ID"
          fi
      
      # This step is no longer needed since we use PR number directly
      # But keeping a simplified version for backwards compatibility
      - name: Extract branch name
        id: extract_branch
        run: |
          echo "branch_name=pr-${{ github.event.number }}" >> $GITHUB_OUTPUT
      
      # Create or update Supabase branch environment
      - name: Create/Update Supabase branch environment
        id: supabase_branch
        working-directory: lpg-backend
        run: |
          echo "===== CREATING SUPABASE BRANCH ENVIRONMENT ====="
          
          # Get Supabase project ID from Doppler with verification
          echo "Step 1: Retrieving SUPABASE_PROJECT_ID from Doppler"
          PROJECT_ID=$(doppler run --project lpg --config dev -- printenv SUPABASE_PROJECT_ID)
          
          # Validate project ID before proceeding
          if [ -z "$PROJECT_ID" ]; then
            echo "::error::CRITICAL: SUPABASE_PROJECT_ID is empty or not set in Doppler"
            echo "PROJECT_ID from printenv: '$PROJECT_ID'"
            exit 1
          else 
            echo "✅ Successfully retrieved PROJECT_ID: [${PROJECT_ID:0:5}...]" # Only show first 5 chars
            echo "project_id=$PROJECT_ID" >> $GITHUB_OUTPUT
          fi
          
          echo "===== TESTING SUPABASE CLI ACCESS ====="
          # Test Supabase CLI functionality before attempting branch operations
          echo "Step 2: Checking Supabase auth status"
          supabase projects list --access-token="$SUPABASE_ACCESS_TOKEN" || {
            echo "::error::Failed to list Supabase projects. Check SUPABASE_ACCESS_TOKEN validity."
            exit 1
          }
          
          echo "===== LINKING SUPABASE PROJECT ====="
          # Link to Supabase project with enhanced error handling
          echo "Step 3: Linking to Supabase project $PROJECT_ID"
          supabase link --project-ref $PROJECT_ID || {
            echo "::error::Failed to link Supabase project. Verify project ID and access token."
            echo "Project ID: [${PROJECT_ID:0:5}...]"
            echo "Checking if project exists:"
            supabase projects list --access-token="$SUPABASE_ACCESS_TOKEN" | grep $PROJECT_ID || echo "Project not found in list"
            exit 1
          }
          
          echo "===== BRANCH ENVIRONMENT CREATION ====="
          # Create a PR-specific branch name with prefix for clarity
          BRANCH_NAME="pr-${{ github.event.number }}"
          echo "Step 4: Creating/checking branch: $BRANCH_NAME"
          
          # First check if preview branching is supported
          echo "Checking if preview branching is enabled:"
          supabase branches list --output=json --experimental || {
            echo "::error::Preview branching appears to be disabled for this project"
            echo "Please enable preview branching in your Supabase dashboard first"
            exit 1
          }
          
          # Now check if branch already exists with proper error handling
          echo "Checking if branch already exists"
          BRANCH_LIST=$(supabase branches list --output=json --experimental)
          echo "Available branches: $BRANCH_LIST"
          BRANCH_EXISTS=$(echo $BRANCH_LIST | jq --arg branch "$BRANCH_NAME" '.[] | select(.name==$branch) | .id' -r || echo "")
          
          if [ -z "$BRANCH_EXISTS" ]; then
            echo "Creating new Supabase branch: $BRANCH_NAME"
            
            # Attempt branch creation with comprehensive error handling
            BRANCH_CREATION=$(supabase branches create "$BRANCH_NAME" --output=json --experimental 2>&1)
            CREATION_STATUS=$?
            
            if [ $CREATION_STATUS -ne 0 ]; then
              echo "::error::Failed to create branch: $BRANCH_NAME"
              echo "Error output: $BRANCH_CREATION"
              
              # Check for common error patterns
              if [[ "$BRANCH_CREATION" == *"Preview branching is not enabled"* ]]; then
                echo "::error::Preview branching is not enabled for this project. Please enable it in Supabase dashboard."
              elif [[ "$BRANCH_CREATION" == *"Cannot create preview branch from another branch project"* ]]; then
                echo "::error::Cannot create a preview branch from another branch. Make sure you're connected to the main project."
              elif [[ "$BRANCH_CREATION" == *"already exists"* ]]; then
                echo "::warning::Branch already exists but wasn't detected in list. Continuing..."
                # Try to get branch ID again
                BRANCH_LIST=$(supabase branches list --output=json --experimental)
                BRANCH_EXISTS=$(echo $BRANCH_LIST | jq --arg branch "$BRANCH_NAME" '.[] | select(.name==$branch) | .id' -r || echo "")
                if [ -n "$BRANCH_EXISTS" ]; then
                  BRANCH_ID=$BRANCH_EXISTS
                else
                  # Critical error - can't proceed without branch ID
                  echo "::error::Cannot identify branch ID for existing branch. Stopping workflow."
                  exit 1
                fi
              else
                exit 1
              fi
            else
              # Extract branch ID from successful creation
              BRANCH_ID=$(echo "$BRANCH_CREATION" | jq '.id' -r)
              if [ -z "$BRANCH_ID" ]; then
                echo "::error::Failed to extract branch ID from Supabase response"
                echo "Response: $BRANCH_CREATION"
                exit 1
              fi
              echo "✅ Branch created successfully with ID: ${BRANCH_ID:0:8}..."
            fi
            
            echo "branch_id=$BRANCH_ID" >> $GITHUB_OUTPUT
            echo "created=true" >> $GITHUB_OUTPUT
          else
            echo "Using existing Supabase branch: $BRANCH_NAME with ID: ${BRANCH_EXISTS:0:8}..."
            echo "branch_id=$BRANCH_EXISTS" >> $GITHUB_OUTPUT
            echo "created=false" >> $GITHUB_OUTPUT
          fi
      
      # Apply migrations to branch environment
      - name: Apply migrations to branch
        working-directory: lpg-backend
        run: |
          echo "===== APPLYING MIGRATIONS TO BRANCH ENVIRONMENT ====="
          # Get current branch ID and project ID from previous steps
          BRANCH_ID=${{ steps.supabase_branch.outputs.branch_id }}
          PROJECT_ID=${{ steps.supabase_branch.outputs.project_id }}
          
          # Verify we have the required values
          if [ -z "$BRANCH_ID" ] || [ -z "$PROJECT_ID" ]; then
            echo "::error::Missing required values: BRANCH_ID=$BRANCH_ID, PROJECT_ID=$PROJECT_ID"
            exit 1
          fi
          
          echo "Applying migrations to branch PR-${{ github.event.number }} (ID: ${BRANCH_ID:0:8}...)"
          
          # List available migrations first to verify they can be accessed
          echo "Listing available migrations:"
          supabase migration list --experimental || {
            echo "::error::Failed to list migrations. Verify file structure and Supabase CLI access."
            exit 1
          }
          
          # Apply migrations with extended error handling
          echo "Pushing migrations to branch..."
          DB_PUSH_RESULT=$(supabase db push --experimental 2>&1)
          PUSH_STATUS=$?
          
          if [ $PUSH_STATUS -ne 0 ]; then
            echo "::error::Failed to push migrations to branch"
            echo "Error output: $DB_PUSH_RESULT"
            
            # Check for common error patterns
            if [[ "$DB_PUSH_RESULT" == *"connection refused"* ]]; then
              echo "::error::Database connection refused. Verify network access and credentials."
            elif [[ "$DB_PUSH_RESULT" == *"SASL auth"* ]]; then
              echo "::error::SASL authentication failed. Check database credentials in Doppler."
            else
              echo "::error::Unknown error pushing migrations. See logs for details."
            fi
            
            exit 1
          else
            echo "✅ Successfully applied migrations to branch environment"
          fi
      
      # Run migration validation
      - name: Validate migrations
        working-directory: lpg-backend
        run: |
          # Run validation script using Doppler for env vars
          doppler run --project lpg --config dev -- node scripts/validate-migrations.js --branch=${{ steps.supabase_branch.outputs.branch_id }} || echo "Validation script not fully implemented yet"
        continue-on-error: true  # Allow this to fail until script is implemented
      
      # Add comment to PR with branch details
      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branchName = 'pr-${{ github.event.number }}';
            const branchId = '${{ steps.supabase_branch.outputs.branch_id }}';
            const projectId = '${{ steps.supabase_branch.outputs.project_id }}';
            const wasCreated = '${{ steps.supabase_branch.outputs.created }}' === 'true';
            
            const comment = `## Supabase Branch Environment
            
            ${wasCreated ? '🆕 Created new' : '🔄 Using existing'} Supabase branch environment: **${branchName}**
            
            ### Branch Details
            - **Branch ID:** \`${branchId}\`
            - **Status:** Migration${wasCreated ? 's applied' : ' update attempted'}
            
            To connect to this branch environment locally:
            \`\`\`bash
            cd lpg-backend
            supabase link --project-ref=${projectId} --branch=${branchId}
            \`\`\`
            
            To run migrations against this branch:
            \`\`\`bash
            cd lpg-backend
            supabase db push --experimental
            \`\`\`
            
            ℹ️ You can view this branch in the Supabase Dashboard under **Project Settings → Branch Environments**
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      # Notify on failure
      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const comment = `## ❌ Supabase Branch Environment Setup Failed
            
            The workflow to create or update a Supabase branch environment for this PR failed.
            
            Please check the [workflow logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
