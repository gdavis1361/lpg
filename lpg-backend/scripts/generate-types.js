#!/usr/bin/env node

/**
 * Supabase TypeScript Type Generation Script
 * 
 * This script generates TypeScript types from your Supabase database schema.
 * It can run against either the main project or a specific branch environment.
 * 
 * Usage:
 *   node generate-types.js [--branch=<branch-id>] [--output=<output-path>]
 * 
 * Options:
 *   --branch=<branch-id>      Specify a Supabase branch ID to generate types from
 *   --output=<output-path>    Specify the output path for the generated types (default: ../lpg-ui/src/types/supabase.ts)
 *   --help                    Show help information
 * 
 * Examples:
 *   node generate-types.js
 *   node generate-types.js --branch=abcdef-ghijk-12345
 *   node generate-types.js --output=../custom/path/types.ts
 */

import { createClient } from '@supabase/supabase-js';
import { parseArgs } from 'node:util';
import fs from 'fs';
import path from 'path';
import { execSync } from 'child_process';

// Parse command line arguments
const options = {
  branch: { type: 'string' },
  output: { type: 'string' },
  help: { type: 'boolean' }
};

const { values: args } = parseArgs({ options });

// Show help if requested
if (args.help) {
  console.log(`
Supabase TypeScript Type Generation Script

Usage:
  node generate-types.js [--branch=<branch-id>] [--output=<output-path>]

Options:
  --branch=<branch-id>      Specify a Supabase branch ID to generate types from
  --output=<output-path>    Specify the output path for the generated types (default: ../lpg-ui/src/types/supabase.ts)
  --help                    Show help information

Examples:
  node generate-types.js
  node generate-types.js --branch=abcdef-ghijk-12345
  node generate-types.js --output=../custom/path/types.ts
  `);
  process.exit(0);
}

// Initialize Supabase client with environment variables
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || '';
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || '';

if (!supabaseUrl || !supabaseKey) {
  console.error('ERROR: Required environment variables not found.');
  console.error('Make sure NEXT_PUBLIC_SUPABASE_URL and SUPABASE_SERVICE_ROLE_KEY are set.');
  console.error('When running locally, use:');
  console.error('  doppler run --project lpg --config dev -- node scripts/generate-types.js');
  process.exit(1);
}

// Determine output path
const outputPath = args.output || path.resolve(__dirname, '../../lpg-ui/src/types/supabase.ts');

// Ensure output directory exists
const outputDir = path.dirname(outputPath);
if (!fs.existsSync(outputDir)) {
  fs.mkdirSync(outputDir, { recursive: true });
  console.log(`Created directory: ${outputDir}`);
}

// Generate types using Supabase CLI
async function generateTypes() {
  try {
    console.log('Generating TypeScript types from Supabase schema...');
    
    // Create options array for Supabase CLI
    const options = [];
    
    // If a branch is specified, add branch option
    if (args.branch) {
      console.log(`Using branch: ${args.branch}`);
      options.push(`--branch=${args.branch}`);
    }
    
    // Use Supabase CLI to generate types
    // Note: Requires the supabase CLI to be installed and linked to your project
    const command = `supabase gen types typescript --linked --schema public ${options.join(' ')}`;
    
    console.log(`Executing: ${command}`);
    const generatedTypes = execSync(command).toString();
    
    // Customize the output
    const formattedTypes = customizeTypes(generatedTypes);
    
    // Write the generated types to the output file
    fs.writeFileSync(outputPath, formattedTypes);
    console.log(`âœ… TypeScript types written to: ${outputPath}`);
    
    // Verify the output
    const stats = fs.statSync(outputPath);
    console.log(`File size: ${(stats.size / 1024).toFixed(2)} KB`);
    
    return true;
  } catch (error) {
    console.error('Error generating types:', error.message);
    
    // Provide helpful troubleshooting information
    console.error('\nTroubleshooting tips:');
    console.error('1. Make sure the Supabase CLI is installed: npm install -g supabase');
    console.error('2. Ensure your project is linked: supabase link --project-ref=<project-id>');
    console.error('3. Verify your token has access to the schema information');
    
    return false;
  }
}

// Customize the generated types with additional information and formatting
function customizeTypes(generatedTypes) {
  // Add a header with metadata
  const header = `/**
 * Supabase Generated Types
 * 
 * Auto-generated by generate-types.js on ${new Date().toISOString()}
 * DO NOT EDIT DIRECTLY! Update the database schema and regenerate instead.
 */

`;
  
  // Add our custom helper types
  const customHelpers = `
// Custom helper types
export type PickRequired<T, K extends keyof T> = T & Required<Pick<T, K>>;
export type WithRequiredId<T> = PickRequired<T, 'id'>;
export type WithRequiredKey<T, K extends keyof T> = PickRequired<T, K>;
`;

  return header + generatedTypes + customHelpers;
}

// Run the type generation
generateTypes();
