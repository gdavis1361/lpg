name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'lpg-backend/supabase/**'
      - '.github/workflows/pr-validation.yml'

permissions:
  contents: read
  pull-requests: write  # needed for PR comments
  issues: write         # needed for PR comments

jobs:
  check-migrations:
    runs-on: ubuntu-latest

    env:
      DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}

    steps:
      # ───── Checkout code ───────────────────────────
      - uses: actions/checkout@v4

      # ───── Node & NPM cache ────────────────────────
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      # ───── Install backend dependencies ────────────
      - name: Install backend dependencies
        working-directory: lpg-backend
        run: |
          npm install --legacy-peer-deps
          echo "Node $(node -v)"
          echo "NPM  $(npm -v)"

      # ───── Supabase CLI ────────────────────────────
      - uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Verify Supabase CLI
        run: |
          echo "Supabase CLI $(supabase --version)"

      # ───── Doppler CLI ─────────────────────────────
      - uses: dopplerhq/cli-action@v2

      - name: Setup Doppler
        run: |
          doppler setup --no-interactive \
            --token="${{ secrets.DOPPLER_TOKEN }}" \
            --project=lpg \
            --config=dev

      # ───── Validate Environment Configuration ──────
      - name: Verify Required Environment Variables
        working-directory: lpg-backend
        run: |
          echo "===== ENVIRONMENT VALIDATION ====="
          
          # Check for required environment variables
          MISSING_VARS=()
          
          # Check SUPABASE_ACCESS_TOKEN
          if ! doppler run --project lpg --config dev -- bash -c 'printenv SUPABASE_ACCESS_TOKEN'; then
            MISSING_VARS+=(SUPABASE_ACCESS_TOKEN)
            echo "::warning::SUPABASE_ACCESS_TOKEN is missing in Doppler configuration"
          fi
          
          # Check SUPABASE_PROJECT_ID
          if ! doppler run --project lpg --config dev -- bash -c 'printenv SUPABASE_PROJECT_ID'; then
            MISSING_VARS+=(SUPABASE_PROJECT_ID)
            echo "::warning::SUPABASE_PROJECT_ID is missing in Doppler configuration"
          fi
          
          # Check NEXT_PUBLIC_SUPABASE_URL
          if ! doppler run --project lpg --config dev -- bash -c 'printenv NEXT_PUBLIC_SUPABASE_URL'; then
            MISSING_VARS+=(NEXT_PUBLIC_SUPABASE_URL)
            echo "::warning::NEXT_PUBLIC_SUPABASE_URL is missing in Doppler configuration"
          fi
          
          # Check NEXT_PUBLIC_SUPABASE_ANON_KEY
          if ! doppler run --project lpg --config dev -- bash -c 'printenv NEXT_PUBLIC_SUPABASE_ANON_KEY'; then
            MISSING_VARS+=(NEXT_PUBLIC_SUPABASE_ANON_KEY)
            echo "::warning::NEXT_PUBLIC_SUPABASE_ANON_KEY is missing in Doppler configuration"
          fi
          
          if [ ${#MISSING_VARS[@]} -gt 0 ]; then
            echo "::error::Missing required environment variables"
            exit 1
          fi
          
          echo "✅ All required environment variables are set"
          
          # List migrations for reference
          echo "===== AVAILABLE MIGRATIONS ====="
          ls -la supabase/migrations/

      # ───── Check migration syntax ────────────────
      - name: Check migration SQL syntax
        working-directory: lpg-backend
        run: |
          echo "===== CHECKING MIGRATION SYNTAX ====="
          
          # Check SQL files for basic syntax 
          # This is a simple check that can be expanded
          SYNTAX_ERRORS=0
          for SQL_FILE in supabase/migrations/*.sql; do
            if [ -f "$SQL_FILE" ]; then
              echo "Checking $SQL_FILE..."
              # Check for unmatched quotes, parentheses, etc.
              ERRORS=$(grep -c -E '(CREATE|ALTER) .* WITHOUT VALID SYNTAX' "$SQL_FILE" || true)
              if [ "$ERRORS" -gt 0 ]; then
                echo "::error::Syntax issue detected in $SQL_FILE"
                SYNTAX_ERRORS=$((SYNTAX_ERRORS + 1))
              fi
            fi
          done
          
          if [ "$SYNTAX_ERRORS" -gt 0 ]; then
            echo "::error::$SYNTAX_ERRORS syntax issues detected in migration files"
            exit 1
          fi
          
          echo "✅ All migration files passed basic syntax check"

      # ───── Check migration naming convention ───────
      - name: Verify migration naming convention
        working-directory: lpg-backend
        run: |
          echo "===== CHECKING MIGRATION NAMING CONVENTION ====="
          
          # Verify date-based naming convention (YYYYMMDD)
          NAMING_ERRORS=0
          for SQL_FILE in supabase/migrations/*.sql; do
            if [ -f "$SQL_FILE" ]; then
              FILENAME=$(basename "$SQL_FILE")
              if ! [[ $FILENAME =~ ^[0-9]{8} ]]; then
                echo "::error::Migration file $FILENAME does not follow date-based naming convention (should start with YYYYMMDD)"
                NAMING_ERRORS=$((NAMING_ERRORS + 1))
              fi
            fi
          done
          
          if [ "$NAMING_ERRORS" -gt 0 ]; then
            echo "::error::$NAMING_ERRORS migration files don't follow naming convention"
            exit 1
          fi
          
          echo "✅ All migration files follow the proper naming convention"

      # ───── Comment success on PR ───────────────────
      - name: Post migration validation report
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: |
                ## Migration Validation Passed ✅

                Your database migrations have passed initial validation!

                ### Checks Completed:
                - Environment variables verification
                - Migration file naming convention (date-based)
                - Basic syntax check
                
                ### Next steps:
                1. **Local testing**: doppler run --project lpg --config dev -- npm run migrate
                2. **Code review**: Migrations are ready for review
                3. **Deployment**: After merge, changes will be applied to the dev environment
            })

      # ───── Comment failure on PR ───────────────────
      - name: Post migration validation failure
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: |
                ## ❌ Migration Validation Failed

                One or more checks for your database migrations failed.
                Please review the workflow logs for details on the specific failures.
                
                Common issues:
                - Missing environment variables in Doppler
                - Migration files not following date-based naming convention
                - SQL syntax issues in migration files
            })
